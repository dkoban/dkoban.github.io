mapping = aes(x = gender,
y = wage)) +
geom_boxplot()
ggplot(data = plotdf,
mapping = aes(x = gender,
y = wage)) +
geom_boxplot()
ggplot(data = plotdf,
mapping = aes(x = gender,
y = wage)) +
geom_boxplot() +
ylim(0, 100)
full.fit2
?t.test()
t.test(x = plotdf$wage[plotdf$gender == "female"],
y = plotdf$wage[plotdf$gender == "female"],
alternative = "two.sided")
t.test(x = plotdf$wage[plotdf$gender == "female"],
y = plotdf$wage[plotdf$gender == "male"],
alternative = "two.sided")
setwd("~/Documents/MIT_course/Module2_CS2_Gender-wage-gap")
# Set Directory
setwd("~/Documents/MIT_course/Module2_CS2_Gender-wage-gap"
# Set Directory
setwd("~/Documents/MIT_course/Module2_CS2_Gender-wage-gap")
rm(list=ls())
# Load xtable library to print table in .text format
library(xtable)
# Set Directory
setwd("~/Documents/MIT_course/Module2_CS2_Gender-wage-gap")
# Load Dataset and see variables and the number of observations.
load(file="pay.discrimination.Rdata")
str(data)
dim(data)
# Attach dataset to current workspace.
attach(data)
# Compute basic stats:
stats.female  <- as.matrix(apply(data[female==1,], 2, mean))
stats.male    <- as.matrix(apply(data[female==0,], 2, mean))
stats         <- cbind(stats.male, stats.female)
stats
# Print basic stats
colnames(stats) = c("male averages", "female averages")
xtable(stats)
# Wage linear regression
fmla1     <- wage ~  female + sc+ cg+ mw + so + we + exp1 + exp2 + exp3
fmla1
# Run OlS regression, get coefficients, standard errors and 95% confidence interval
full.fit1 <- lm(fmla1, data=data)
est1      <- summary(full.fit1)$coef[2,1:2]
ci1       <-  confint(full.fit1)[2,]
full.fit1
# Linear regression: Quadratic specification
fmla2     <-  wage ~  female + (sc+ cg+ mw + so + we + exp1 + exp2 + exp3)^2
# Run OlS regression, get coefficients, standard errors and 95% confidence interval
full.fit2 <- lm(fmla2, data=data)
est2      <- summary(full.fit2)$coef[2,1:2]
ci2       <- confint(full.fit2)[2,]
#Create table to store regression results
table1     <- matrix(0, 2, 4)
table1[1,] <- c(est1,ci1)
table1[2,] <- c(est2,ci2)
table1
#Give column and  row names
colnames(table1) <- c("Estimate", "Standard Error", "Lower Conf. Bound", "Upper Conf. Bound")
rownames(table1) <- c("basic reg", "flex reg")
table1
# Linear regression of y (outcome) on covariates
fmla1.y <- wage ~  sc+ cg+ mw + so + we + exp1 + exp2 + exp3
# Linear regression of d (treatment) on covariates
fmla1.d <- female ~  sc+ cg+ mw + so + we + exp1 + exp2 + exp3
# Residuals of outcome regression
t.Y    <- lm(fmla1.y, data=data)$res
# Residuals of treatment regression
t.D    <-  lm(fmla1.d, data=data)$res
# Run OLS coefficient get coefficients and 95% confidence intervals
partial.fit1   <- lm(t.Y~t.D)
partial.est1   <- summary(partial.fit1)$coef[2,1:2]
partial.ci1    <- confint(partial.fit1)[2,]
fmla2.y  <- wage ~  (sc+ cg+ mw + so + we + exp1 + exp2 + exp3)^2
fmla2.d  <- female ~ (sc+ cg+ mw + so + we + exp1 + exp2 + exp3)^2
# get residuals from linear regression
t.Y  <- lm(fmla2.y, data=data)$res
t.D  <- lm(fmla2.d, data=data)$res
# regress residuals one onether to get result from partialled out regression
partial.fit2  <-  lm(t.Y~t.D)
partial.est2  <-  summary(partial.fit2)$coef[2,1:2]
partial.ci2   <-  confint(partial.fit2)[2,]
#Create table to store regression results
table2     <- matrix(0, 4, 2)
table2[1,] <- c(est1)
table2[2,] <- c(est2)
table2[3,] <- c(partial.est1)
table2[4,] <- c(partial.est2)
#Give column and row names
colnames(table2) <- c("Estimate", "Standard Error")
rownames(table2) <- c("basic reg", "flex reg", "basic reg with partialling out", "flex reg with partialling out")
#Print results
print(table1, digits=3)
print(table2, digits=3)
install.packages("prettydoc")
setwd("~/Documents/annotated_bib")
setwd("~/Documents/dkoban.github.io")
knitr::opts_chunk$set(echo = TRUE)
#![Figure 1. Friend Count Distro.](FriendCountDistro.png)
library(tidyverse)
botometer_full <- read_excel("botometer_full.xlsx")
library(readxl)
botometer_full <- read_excel("botometer_full.xlsx")
botometer_full <- read_excel("botometer_full.xlsx")
bot_full <- read_excel("botometer_full.xlsx")
bot_lite <- read_csv("botometer_scores_20Oct2020.csv")
df <- left_join(bot_full, bot_lite, by = "id_str")
bot_lite <- read_csv("botometer_scores_20Oct2020.csv") %>%
select(id_str = user_id)
bot_lite <- read_csv("botometer_scores_20Oct2020.csv") %>%
select(id_str = user_id, botscore)
bot_lite <- read_csv("botometer_scores_20Oct2020.csv") %>%
select(id_str = user_id, bot_lite = botscore)
df <- left_join(bot_full, bot_lite, by = "id_str")
bot_lite <- read_csv("botometer_scores_20Oct2020.csv") %>%
select(id_str = user_id, bot_lite = botscore) %>%
mutate(id_str = id_str %>% as.character())
df <- left_join(bot_full, bot_lite, by = "id_str")
df <- left_join(bot_full, bot_lite, by = "id_str") %>%
filter(!is.na(bot_lite), !is.na(overall_raw_en))
df <- left_join(bot_full, bot_lite, by = "id_str") %>%
filter(!is.na(bot_lite), !is.na(overall_raw_en)) %>%
select(id_str,
astroturf_raw_en,
fake_follower_raw_en,
financial_raw_en,
spammer_raw_en,
self_declared,
other_raw_en,
overall_raw_en,
cap_en,
bot_lite)
df <- left_join(bot_full, bot_lite, by = "id_str") %>%
filter(!is.na(bot_lite), !is.na(overall_raw_en)) %>%
select(id_str,
astroturf_raw_en,
fake_follower_raw_en,
financial_raw_en,
spammer_raw_en,
self_declared_raw_en,
other_raw_en,
overall_raw_en,
cap_en,
bot_lite)
library(ggplot2)
df <- left_join(bot_full, bot_lite, by = "id_str") %>%
filter(!is.na(bot_lite), !is.na(overall_raw_en))
df <- bind_rows(
df %>% select(id_str, screen_name,
astroturf_raw_en, bot_lite) %>%
mutate(type = "astroturf"),
df %>% select(id_str, screen_name,
fake_follower_raw_en, bot_lite) %>%
mutate(type = "fake_follower"),
df %>% select(id_str, screen_name,
financial_raw_en, bot_lite) %>%
mutate(type = "financial"),
df %>% select(id_str, screen_name,
spammer_raw_en, bot_lite) %>%
mutate(type = "spammer"),
df %>% select(id_str, screen_name,
self_declared_raw_en, bot_lite) %>%
mutate(type = "self_declared"),
df %>% select(id_str, screen_name,
other_raw_en, bot_lite) %>%
mutate(type = "other"),
df %>% select(id_str, screen_name,
overall_raw_en, bot_lite) %>%
mutate(type = "overall"))
df <- left_join(bot_full, bot_lite, by = "id_str") %>%
filter(!is.na(bot_lite), !is.na(overall_raw_en))
df <- bind_rows(
df %>% select(id_str, screen_name,
bot_full = astroturf_raw_en, bot_lite) %>%
mutate(type = "astroturf"),
df %>% select(id_str, screen_name,
bot_full = fake_follower_raw_en, bot_lite) %>%
mutate(type = "fake_follower"),
df %>% select(id_str, screen_name,
bot_full = financial_raw_en, bot_lite) %>%
mutate(type = "financial"),
df %>% select(id_str, screen_name,
bot_full = spammer_raw_en, bot_lite) %>%
mutate(type = "spammer"),
df %>% select(id_str, screen_name,
bot_full = self_declared_raw_en, bot_lite) %>%
mutate(type = "self_declared"),
df %>% select(id_str, screen_name,
bot_full = other_raw_en, bot_lite) %>%
mutate(type = "other"),
df %>% select(id_str, screen_name,
bot_full = overall_raw_en, bot_lite) %>%
mutate(type = "overall"))
ggplot(data = df,
mapping = aes(x = bot_full,
y = bot_lite)) %>%
geom_point() %>%
FacetWrap(~type)
ggplot(data = df,
mapping = aes(x = bot_full,
y = bot_lite)) %>%
geom_point() %>%
facet_wrap(~type)
ggplot(data = df,
mapping = aes(x = bot_full,
y = bot_lite)) +
geom_point() +
facet_wrap(~type)
ggplot(data = df,
mapping = aes(x = bot_full,
y = bot_lite)) +
geom_point() +
facet_wrap(~type, ncol = 1)
ggplot(data = df,
mapping = aes(x = bot_lite,
y = bot_full)) +
geom_point() +
facet_wrap(~type, ncol = 1)
ggplot(data = df,
mapping = aes(x = bot_lite,
y = bot_full)) +
geom_point() +
facet_wrap(~type, ncol = 2)
ggplot(data = df,
mapping = aes(x = bot_lite,
y = bot_full)) +
geom_point(size = 1) +
facet_wrap(~type, ncol = 2)
ggplot(data = df,
mapping = aes(x = bot_lite,
y = bot_full)) +
geom_point(size = 0.5) +
facet_wrap(~type, ncol = 2)
ggplot(data = df,
mapping = aes(x = bot_lite,
y = bot_full)) +
geom_point(size = 0.5, color = "blue") +
facet_wrap(~type, ncol = 2)
ggplot(data = df,
mapping = aes(x = bot_lite,
y = bot_full)) +
geom_point(size = 0.25, color = "blue") +
facet_wrap(~type, ncol = 2)
## Results
```{r, fig.width=14, fig.height=12}
#![Figure 1. Friend Count Distro.](FriendCountDistro.png)
library(tidyverse)
ggplot(data = df,
mapping = aes(x = bot_lite,
y = bot_full)) +
geom_point(size = 0.5, color = "blue", alpha = 0.5) +
geom_smooth(method = "lm", se=FALSE,
color="red", formula = y ~ x) +
facet_wrap(~type, ncol = 2)
ggplot(data = df,
mapping = aes(x = bot_lite,
y = bot_full)) +
geom_point(size = 0.5, color = "blue", alpha = 0.5) +
stat_smooth(method = "lm",color="red") +
facet_wrap(~type, ncol = 2)
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
ggplot(data = df,
mapping = aes(x = bot_lite,
y = bot_full)) +
geom_point(size = 0.5, color = "blue", alpha = 0.5) +
stat_smooth(method = "lm",color="red") +
facet_wrap(~type, ncol = 2) +
lab(title = "Botometer vs. BotometerLite Bot Likelihood Scores",
x = "BotometerLite Score",
y = "Botometer Score")
ggplot(data = df,
mapping = aes(x = bot_lite,
y = bot_full)) +
geom_point(size = 0.5, color = "blue", alpha = 0.5) +
stat_smooth(method = "lm",color="red") +
facet_wrap(~type, ncol = 2) +
labs(title = "Botometer vs. BotometerLite Bot Likelihood Scores",
x = "BotometerLite Score",
y = "Botometer Score")
ggplot(data = df,
mapping = aes(x = bot_lite,
y = bot_full)) +
geom_point(size = 0.5, color = "blue", alpha = 0.5) +
stat_smooth(method = "lm",color="red") +
facet_wrap(~type, ncol = 3) +
labs(title = "Botometer vs. BotometerLite Bot Likelihood Scores",
x = "BotometerLite Score",
y = "Botometer Score")
ggplot(data = df,
mapping = aes(x = bot_lite,
y = bot_full)) +
geom_point(size = 0.5, color = "blue", alpha = 0.5) +
stat_smooth(method = "lm",color="red") +
facet_wrap(~type, ncol = 3) +
geom_text(data=eq,aes(x = 0.8, y = 0.8,label="R2"),
parse = TRUE, inherit.aes=FALSE) +
labs(title = "Botometer vs. BotometerLite Bot Likelihood Scores",
x = "BotometerLite Score",
y = "Botometer Score")
ggplot(data = df,
mapping = aes(x = bot_lite,
y = bot_full)) +
geom_point(size = 0.5, color = "blue", alpha = 0.5) +
stat_smooth(method = "lm",color="red") +
facet_wrap(~type, ncol = 3) +
geom_text(aes(x = 0.8, y = 0.8,label="R2"),
parse = TRUE, inherit.aes=FALSE) +
labs(title = "Botometer vs. BotometerLite Bot Likelihood Scores",
x = "BotometerLite Score",
y = "Botometer Score")
lm_eqn = function(df){
m = lm(y ~ x, df);
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,
list(a = format(coef(m)[1], digits = 2),
b = format(coef(m)[2], digits = 2),
r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
lm_eqn = function(df){
m = lm(y ~ x, df);
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,
list(a = format(coef(m)[1], digits = 2),
b = format(coef(m)[2], digits = 2),
r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
lm_eqn = function(df){
m = lm(y ~ x, df);
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,
list(a = format(coef(m)[1], digits = 2),
b = format(coef(m)[2], digits = 2),
r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
lm_eqn = function(df){
m = lm(y ~ x, df);
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,
list(r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
eq <- ddply(df,.(type),lm_eqn)
require(plyr)
eq <- ddply(df,.(type),lm_eqn)
m = lm(bot_full ~ bot_lite, df);
lm_eqn = function(df){
m = lm(bot_full ~ bot_lite, df);
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,
list(r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
eq <- ddply(df,.(type),lm_eqn)
eq
ggplot(data = df,
mapping = aes(x = bot_lite,
y = bot_full)) +
geom_point(size = 0.5, color = "blue", alpha = 0.5) +
stat_smooth(method = "lm",color="red") +
geom_text(data=eq,aes(x = 0.8, y = 0.8,label=V1),
parse = TRUE, inherit.aes=FALSE)
ggplot(data = df,
mapping = aes(x = bot_lite,
y = bot_full)) +
geom_point(size = 0.5, color = "blue", alpha = 0.5) +
stat_smooth(method = "lm",color="red") +
geom_text(data=eq,aes(x = 0.8, y = 0.8,label=V1),
parse = TRUE, inherit.aes=FALSE) +
facet_wrap(~type, ncol = 3) +
labs(title = "Botometer vs. BotometerLite Bot Likelihood Scores",
x = "BotometerLite Score",
y = "Botometer Score")
0.12^2
0.63^2
bot_full <- read_excel("botometer_full.xlsx")
df <- left_join(bot_full, bot_lite, by = "id_str") %>%
filter(!is.na(bot_lite), !is.na(overall_raw_en))
bot_lite <- read_csv("botometer_scores_20Oct2020.csv") %>%
select(id_str = user_id, bot_lite = botscore) %>%
mutate(id_str = id_str %>% as.character())
df <- left_join(bot_full, bot_lite, by = "id_str") %>%
filter(!is.na(bot_lite), !is.na(overall_raw_en))
df <- bind_rows(
df %>% select(id_str, screen_name,
bot_full = astroturf_raw_en, bot_lite) %>%
mutate(type = "Astroturf"),
df %>% select(id_str, screen_name,
bot_full = fake_follower_raw_en, bot_lite) %>%
mutate(type = "Fake Follower"),
df %>% select(id_str, screen_name,
bot_full = financial_raw_en, bot_lite) %>%
mutate(type = "Financial"),
df %>% select(id_str, screen_name,
bot_full = spammer_raw_en, bot_lite) %>%
mutate(type = "Spammer"),
df %>% select(id_str, screen_name,
bot_full = self_declared_raw_en, bot_lite) %>%
mutate(type = "Self Declared"),
df %>% select(id_str, screen_name,
bot_full = other_raw_en, bot_lite) %>%
mutate(type = "Other"),
df %>% select(id_str, screen_name,
bot_full = overall_raw_en, bot_lite) %>%
mutate(type = "Overall"),
df %>% select(id_str, screen_name,
bot_full = cap_en, bot_lite) %>%
mutate(type = "CAP"))
lm_eqn = function(df){
m = lm(bot_full ~ bot_lite, df);
eq <- substitute(italic(r)^2~"="~r2,
list(r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
require(plyr)
eq <- ddply(df,.(type),lm_eqn)
ggplot(data = df,
mapping = aes(x = bot_lite,
y = bot_full)) +
geom_point(size = 0.5, color = "blue", alpha = 0.5) +
stat_smooth(method = "lm",color="red") +
geom_label(data=eq,aes(x = 0.85, y = 0.9,label=V1),
parse = TRUE, inherit.aes=FALSE) +
facet_wrap(~type, ncol = 3) +
labs(title = "Botometer vs. BotometerLite Bot Likelihood Scores",
x = "BotometerLite Score",
y = "Botometer Score")
library(tidyverse)
library(readxl)
library(ggplot2)
bot_full <- read_excel("botometer_full.xlsx")
bot_lite <- read_csv("botometer_scores_20Oct2020.csv") %>%
select(id_str = user_id, bot_lite = botscore) %>%
mutate(id_str = id_str %>% as.character())
df <- left_join(bot_full, bot_lite, by = "id_str") %>%
filter(!is.na(bot_lite), !is.na(overall_raw_en))
df <- bind_rows(
df %>% select(id_str, screen_name,
bot_full = astroturf_raw_un, bot_lite) %>%
mutate(type = "Astroturf"),
df %>% select(id_str, screen_name,
bot_full = fake_follower_raw_un, bot_lite) %>%
mutate(type = "Fake Follower"),
df %>% select(id_str, screen_name,
bot_full = financial_raw_un, bot_lite) %>%
mutate(type = "Financial"),
df %>% select(id_str, screen_name,
bot_full = spammer_raw_un, bot_lite) %>%
mutate(type = "Spammer"),
df %>% select(id_str, screen_name,
bot_full = self_declared_raw_un, bot_lite) %>%
mutate(type = "Self Declared"),
df %>% select(id_str, screen_name,
bot_full = other_raw_un, bot_lite) %>%
mutate(type = "Other"),
df %>% select(id_str, screen_name,
bot_full = overall_raw_un, bot_lite) %>%
mutate(type = "Overall"),
df %>% select(id_str, screen_name,
bot_full = cap_un, bot_lite) %>%
mutate(type = "Complete Automation Probability"))
lm_eqn = function(df){
m = lm(bot_full ~ bot_lite, df);
eq <- substitute(italic(r)^2~"="~r2,
list(r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
require(plyr)
eq <- ddply(df,.(type),lm_eqn)
ggplot(data = df,
mapping = aes(x = bot_lite,
y = bot_full)) +
geom_point(size = 0.5, color = "blue", alpha = 0.5) +
stat_smooth(method = "lm",color="red") +
geom_label(data=eq,aes(x = 0.85, y = 0.9,label=V1),
parse = TRUE, inherit.aes=FALSE) +
facet_wrap(~type, ncol = 3) +
labs(title = "Botometer vs. BotometerLite Bot Likelihood Scores",
x = "BotometerLite Score",
y = "Botometer Score")
df['cap_en'] %>% hist()
bot_full['cap_en'] %>% hist()
bot_full$'cap_en' %>% hist()
bot_full$'cap_un' %>% hist()
bot_full$'cap_en' %>% hist()
bot_full$cap_en %>% hist()
bot_full$cap_en %>% hist(main = "Distribution of Complete Automation Probability Scores")
?hist()
bot_full$cap_en %>% hist(main = "Distribution of Complete Automation Probability Scores",
xlab = "Complete Automation Probability")
#bot_full$cap_en
bot_full$cap_un %>% hist(main = "Distribution of Complete Automation Probability Scores",
xlab = "Complete Automation Probability")
#bot_full$cap_en
bot_full$cap_en %>% hist(main = "Distribution of Complete Automation Probability Scores",
xlab = "Complete Automation Probability")
sum(bot_full$cap_en >= 0.75)
sum(bot_full$cap_en >= 0.75)/length(bot_full)
bot_full$cap_en %>% hist(main = "Distribution of Complete Automation Probability Scores",
xlab = "Complete Automation Probability")
sum(bot_full$cap_en >= 0.8)/length(bot_full)
sum(bot_full$cap_en >= 0.8)/length(bot_full)
sum(bot_full$cap_en >= 0.85)/length(bot_full$cap_en)
sum(bot_full$cap_en >= 0.85)
sum(bot_full$cap_en >= 0.75)/length(bot_full$cap_en)
